/*
 * generated by Xtext 2.13.0
 */
grammar InternalWhileLang;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package edu.ucf.cs.whilelang.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package edu.ucf.cs.whilelang.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import edu.ucf.cs.whilelang.services.WhileLangGrammarAccess;

}

@parser::members {

 	private WhileLangGrammarAccess grammarAccess;

    public InternalWhileLangParser(TokenStream input, WhileLangGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected WhileLangGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getProgramAccess().getStmtParserRuleCall());
	}
	this_Stmt_0=ruleStmt
	{
		$current = $this_Stmt_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleStmt
entryRuleStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStmtRule()); }
	iv_ruleStmt=ruleStmt
	{ $current=$iv_ruleStmt.current; }
	EOF;

// Rule Stmt
ruleStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStmtAccess().getAssignmentParserRuleCall_0());
		}
		this_Assignment_0=ruleAssignment
		{
			$current = $this_Assignment_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStmtAccess().getSkipParserRuleCall_1());
		}
		this_Skip_1=ruleSkip
		{
			$current = $this_Skip_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStmtAccess().getBlockParserRuleCall_2());
		}
		this_Block_2=ruleBlock
		{
			$current = $this_Block_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStmtAccess().getWhileParserRuleCall_3());
		}
		this_While_3=ruleWhile
		{
			$current = $this_While_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStmtAccess().getIfParserRuleCall_4());
		}
		this_If_4=ruleIf
		{
			$current = $this_If_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleBlock=ruleBlock
	{ $current=$iv_ruleBlock.current; }
	EOF;

// Rule Block
ruleBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockAccess().getStmtsStmtParserRuleCall_1_0());
				}
				lv_stmts_1_0=ruleStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockRule());
					}
					add(
						$current,
						"stmts",
						lv_stmts_1_0,
						"edu.ucf.cs.whilelang.WhileLang.Stmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=';'
			{
				newLeafNode(otherlv_2, grammarAccess.getBlockAccess().getSemicolonKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBlockAccess().getStmtsStmtParserRuleCall_2_1_0());
					}
					lv_stmts_3_0=ruleStmt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBlockRule());
						}
						add(
							$current,
							"stmts",
							lv_stmts_3_0,
							"edu.ucf.cs.whilelang.WhileLang.Stmt");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	iv_ruleAssignment=ruleAssignment
	{ $current=$iv_ruleAssignment.current; }
	EOF;

// Rule Assignment
ruleAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_var_0_0=RULE_ID
				{
					newLeafNode(lv_var_0_0, grammarAccess.getAssignmentAccess().getVarIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssignmentRule());
					}
					setWithLastConsumed(
						$current,
						"var",
						lv_var_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':='
		{
			newLeafNode(otherlv_1, grammarAccess.getAssignmentAccess().getColonEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getAexpAExpressionParserRuleCall_2_0());
				}
				lv_aexp_2_0=ruleAExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"aexp",
						lv_aexp_2_0,
						"edu.ucf.cs.whilelang.WhileLang.AExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSkip
entryRuleSkip returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSkipRule()); }
	iv_ruleSkip=ruleSkip
	{ $current=$iv_ruleSkip.current; }
	EOF;

// Rule Skip
ruleSkip returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='skip'
		{
			newLeafNode(otherlv_0, grammarAccess.getSkipAccess().getSkipKeyword_0());
		}
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSkipAccess().getSkipSAction_1(),
					$current);
			}
		)
	)
;

// Entry rule entryRuleWhile
entryRuleWhile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileRule()); }
	iv_ruleWhile=ruleWhile
	{ $current=$iv_ruleWhile.current; }
	EOF;

// Rule While
ruleWhile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='while'
		{
			newLeafNode(otherlv_0, grammarAccess.getWhileAccess().getWhileKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileAccess().getBexpBExpressionParserRuleCall_1_0());
				}
				lv_bexp_1_0=ruleBExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileRule());
					}
					set(
						$current,
						"bexp",
						lv_bexp_1_0,
						"edu.ucf.cs.whilelang.WhileLang.BExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='do'
		{
			newLeafNode(otherlv_2, grammarAccess.getWhileAccess().getDoKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileAccess().getBlockBlockParserRuleCall_3_0());
				}
				lv_block_3_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileRule());
					}
					set(
						$current,
						"block",
						lv_block_3_0,
						"edu.ucf.cs.whilelang.WhileLang.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleIf
entryRuleIf returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfRule()); }
	iv_ruleIf=ruleIf
	{ $current=$iv_ruleIf.current; }
	EOF;

// Rule If
ruleIf returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfAccess().getIfKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfAccess().getBexpBExpressionParserRuleCall_1_0());
				}
				lv_bexp_1_0=ruleBExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfRule());
					}
					set(
						$current,
						"bexp",
						lv_bexp_1_0,
						"edu.ucf.cs.whilelang.WhileLang.BExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='then'
		{
			newLeafNode(otherlv_2, grammarAccess.getIfAccess().getThenKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfAccess().getS1BlockParserRuleCall_3_0());
				}
				lv_s1_3_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfRule());
					}
					set(
						$current,
						"s1",
						lv_s1_3_0,
						"edu.ucf.cs.whilelang.WhileLang.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='else'
		{
			newLeafNode(otherlv_4, grammarAccess.getIfAccess().getElseKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfAccess().getS2BlockParserRuleCall_5_0());
				}
				lv_s2_5_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfRule());
					}
					set(
						$current,
						"s2",
						lv_s2_5_0,
						"edu.ucf.cs.whilelang.WhileLang.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAExpression
entryRuleAExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAExpressionRule()); }
	iv_ruleAExpression=ruleAExpression
	{ $current=$iv_ruleAExpression.current; }
	EOF;

// Rule AExpression
ruleAExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAExpressionAccess().getATermParserRuleCall_0());
		}
		this_ATerm_0=ruleATerm
		{
			$current = $this_ATerm_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAExpressionAccess().getAExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_op_2_0=RULE_OPPLUS
					{
						newLeafNode(lv_op_2_0, grammarAccess.getAExpressionAccess().getOpOPPLUSTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"op",
							lv_op_2_0,
							"edu.ucf.cs.whilelang.WhileLang.OPPLUS");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAExpressionAccess().getRightAExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"edu.ucf.cs.whilelang.WhileLang.AExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleATerm
entryRuleATerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getATermRule()); }
	iv_ruleATerm=ruleATerm
	{ $current=$iv_ruleATerm.current; }
	EOF;

// Rule ATerm
ruleATerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getATermAccess().getAPrimaryParserRuleCall_0());
		}
		this_APrimary_0=ruleAPrimary
		{
			$current = $this_APrimary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getATermAccess().getATermLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_op_2_0=RULE_OPMUL
					{
						newLeafNode(lv_op_2_0, grammarAccess.getATermAccess().getOpOPMULTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getATermRule());
						}
						setWithLastConsumed(
							$current,
							"op",
							lv_op_2_0,
							"edu.ucf.cs.whilelang.WhileLang.OPMUL");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getATermAccess().getRightATermParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleATerm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getATermRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"edu.ucf.cs.whilelang.WhileLang.ATerm");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleAPrimary
entryRuleAPrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAPrimaryRule()); }
	iv_ruleAPrimary=ruleAPrimary
	{ $current=$iv_ruleAPrimary.current; }
	EOF;

// Rule APrimary
ruleAPrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAPrimaryAccess().getVarRefExprParserRuleCall_0());
		}
		this_VarRefExpr_0=ruleVarRefExpr
		{
			$current = $this_VarRefExpr_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAPrimaryAccess().getNumLitExprParserRuleCall_1());
		}
		this_NumLitExpr_1=ruleNumLitExpr
		{
			$current = $this_NumLitExpr_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getAPrimaryAccess().getLeftParenthesisKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getAPrimaryAccess().getAExpressionParserRuleCall_2_1());
			}
			this_AExpression_3=ruleAExpression
			{
				$current = $this_AExpression_3.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getAPrimaryAccess().getRightParenthesisKeyword_2_2());
			}
		)
	)
;

// Entry rule entryRuleVarRefExpr
entryRuleVarRefExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarRefExprRule()); }
	iv_ruleVarRefExpr=ruleVarRefExpr
	{ $current=$iv_ruleVarRefExpr.current; }
	EOF;

// Rule VarRefExpr
ruleVarRefExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_var_0_0=RULE_ID
			{
				newLeafNode(lv_var_0_0, grammarAccess.getVarRefExprAccess().getVarIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVarRefExprRule());
				}
				setWithLastConsumed(
					$current,
					"var",
					lv_var_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleNumLitExpr
entryRuleNumLitExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumLitExprRule()); }
	iv_ruleNumLitExpr=ruleNumLitExpr
	{ $current=$iv_ruleNumLitExpr.current; }
	EOF;

// Rule NumLitExpr
ruleNumLitExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_negated_0_0='-'
				{
					newLeafNode(lv_negated_0_0, grammarAccess.getNumLitExprAccess().getNegatedHyphenMinusKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNumLitExprRule());
					}
					setWithLastConsumed($current, "negated", true, "-");
				}
			)
		)?
		(
			(
				lv_val_1_0=RULE_INT
				{
					newLeafNode(lv_val_1_0, grammarAccess.getNumLitExprAccess().getValINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNumLitExprRule());
					}
					setWithLastConsumed(
						$current,
						"val",
						lv_val_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleBExpression
entryRuleBExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBExpressionRule()); }
	iv_ruleBExpression=ruleBExpression
	{ $current=$iv_ruleBExpression.current; }
	EOF;

// Rule BExpression
ruleBExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBExpressionAccess().getBTermParserRuleCall_0());
		}
		this_BTerm_0=ruleBTerm
		{
			$current = $this_BTerm_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getBExpressionAccess().getBExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_op_2_0=RULE_OR
					{
						newLeafNode(lv_op_2_0, grammarAccess.getBExpressionAccess().getOpORTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"op",
							lv_op_2_0,
							"edu.ucf.cs.whilelang.WhileLang.OR");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBExpressionAccess().getRightBExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleBExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"edu.ucf.cs.whilelang.WhileLang.BExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleBTerm
entryRuleBTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBTermRule()); }
	iv_ruleBTerm=ruleBTerm
	{ $current=$iv_ruleBTerm.current; }
	EOF;

// Rule BTerm
ruleBTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBTermAccess().getBRelExpParserRuleCall_0());
		}
		this_BRelExp_0=ruleBRelExp
		{
			$current = $this_BRelExp_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getBTermAccess().getBTermLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_op_2_0=RULE_AND
					{
						newLeafNode(lv_op_2_0, grammarAccess.getBTermAccess().getOpANDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBTermRule());
						}
						setWithLastConsumed(
							$current,
							"op",
							lv_op_2_0,
							"edu.ucf.cs.whilelang.WhileLang.AND");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBTermAccess().getRightBTermParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleBTerm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBTermRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"edu.ucf.cs.whilelang.WhileLang.BTerm");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleBRelExp
entryRuleBRelExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBRelExpRule()); }
	iv_ruleBRelExp=ruleBRelExp
	{ $current=$iv_ruleBRelExp.current; }
	EOF;

// Rule BRelExp
ruleBRelExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBRelExpAccess().getBPrimaryParserRuleCall_0());
		}
		this_BPrimary_0=ruleBPrimary
		{
			$current = $this_BPrimary_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBRelExpAccess().getNotExprParserRuleCall_1());
		}
		this_NotExpr_1=ruleNotExpr
		{
			$current = $this_NotExpr_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBRelExpAccess().getBCompExpParserRuleCall_2());
		}
		this_BCompExp_2=ruleBCompExp
		{
			$current = $this_BCompExp_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getBRelExpAccess().getLeftParenthesisKeyword_3_0());
			}
			{
				newCompositeNode(grammarAccess.getBRelExpAccess().getBExpressionParserRuleCall_3_1());
			}
			this_BExpression_4=ruleBExpression
			{
				$current = $this_BExpression_4.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getBRelExpAccess().getRightParenthesisKeyword_3_2());
			}
		)
	)
;

// Entry rule entryRuleNotExpr
entryRuleNotExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotExprRule()); }
	iv_ruleNotExpr=ruleNotExpr
	{ $current=$iv_ruleNotExpr.current; }
	EOF;

// Rule NotExpr
ruleNotExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='not'
		{
			newLeafNode(otherlv_0, grammarAccess.getNotExprAccess().getNotKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNotExprAccess().getBexpBRelExpParserRuleCall_1_0());
				}
				lv_bexp_1_0=ruleBRelExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNotExprRule());
					}
					set(
						$current,
						"bexp",
						lv_bexp_1_0,
						"edu.ucf.cs.whilelang.WhileLang.BRelExp");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBCompExp
entryRuleBCompExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBCompExpRule()); }
	iv_ruleBCompExp=ruleBCompExp
	{ $current=$iv_ruleBCompExp.current; }
	EOF;

// Rule BCompExp
ruleBCompExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBCompExpAccess().getLeftAExpressionParserRuleCall_0_0());
				}
				lv_left_0_0=ruleAExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBCompExpRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"edu.ucf.cs.whilelang.WhileLang.AExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_op_1_0=RULE_OP_R
				{
					newLeafNode(lv_op_1_0, grammarAccess.getBCompExpAccess().getOpOP_RTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBCompExpRule());
					}
					setWithLastConsumed(
						$current,
						"op",
						lv_op_1_0,
						"edu.ucf.cs.whilelang.WhileLang.OP_R");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBCompExpAccess().getRightAExpressionParserRuleCall_2_0());
				}
				lv_right_2_0=ruleAExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBCompExpRule());
					}
					set(
						$current,
						"right",
						lv_right_2_0,
						"edu.ucf.cs.whilelang.WhileLang.AExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBPrimary
entryRuleBPrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBPrimaryRule()); }
	iv_ruleBPrimary=ruleBPrimary
	{ $current=$iv_ruleBPrimary.current; }
	EOF;

// Rule BPrimary
ruleBPrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_bval_0_0='true'
				{
					newLeafNode(lv_bval_0_0, grammarAccess.getBPrimaryAccess().getBvalTrueKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBPrimaryRule());
					}
					setWithLastConsumed($current, "bval", lv_bval_0_0, "true");
				}
			)
		)
		    |
		(
			(
				lv_bval_1_0='false'
				{
					newLeafNode(lv_bval_1_0, grammarAccess.getBPrimaryAccess().getBvalFalseKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBPrimaryRule());
					}
					setWithLastConsumed($current, "bval", lv_bval_1_0, "false");
				}
			)
		)
	)
;

RULE_SL_COMMENT : '%' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_OPPLUS : ('+'|'-');

RULE_OPMUL : '*';

RULE_OR : 'or';

RULE_AND : 'and';

RULE_OP_R : ('<='|'=='|'>='|'<'|'>'|'!=');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
