/*
 * generated by Xtext 2.13.0
 */
package edu.ucf.cs.whilelang.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class WhileLangGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.Program");
		private final RuleCall cStmtParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Program:
		//	Stmt;
		@Override public ParserRule getRule() { return rule; }
		
		//Stmt
		public RuleCall getStmtParserRuleCall() { return cStmtParserRuleCall; }
	}
	public class StmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.Stmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSkipParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBlockParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWhileParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIfParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Stmt S:
		//	Assignment | Skip | Block | While | If;
		@Override public ParserRule getRule() { return rule; }
		
		//Assignment | Skip | Block | While | If
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Assignment
		public RuleCall getAssignmentParserRuleCall_0() { return cAssignmentParserRuleCall_0; }
		
		//Skip
		public RuleCall getSkipParserRuleCall_1() { return cSkipParserRuleCall_1; }
		
		//Block
		public RuleCall getBlockParserRuleCall_2() { return cBlockParserRuleCall_2; }
		
		//While
		public RuleCall getWhileParserRuleCall_3() { return cWhileParserRuleCall_3; }
		
		//If
		public RuleCall getIfParserRuleCall_4() { return cIfParserRuleCall_4; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStmtsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStmtsStmtParserRuleCall_1_0 = (RuleCall)cStmtsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStmtsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStmtsStmtParserRuleCall_2_1_0 = (RuleCall)cStmtsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Block CompoundS:
		//	'{' stmts+=Stmt (';' stmts+=Stmt)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' stmts+=Stmt (';' stmts+=Stmt)* '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//stmts+=Stmt
		public Assignment getStmtsAssignment_1() { return cStmtsAssignment_1; }
		
		//Stmt
		public RuleCall getStmtsStmtParserRuleCall_1_0() { return cStmtsStmtParserRuleCall_1_0; }
		
		//(';' stmts+=Stmt)*
		public Group getGroup_2() { return cGroup_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//stmts+=Stmt
		public Assignment getStmtsAssignment_2_1() { return cStmtsAssignment_2_1; }
		
		//Stmt
		public RuleCall getStmtsStmtParserRuleCall_2_1_0() { return cStmtsStmtParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarIDTerminalRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAexpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAexpAExpressionParserRuleCall_2_0 = (RuleCall)cAexpAssignment_2.eContents().get(0);
		
		//Assignment AssignS:
		//	var=ID ':=' aexp=AExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//var=ID ':=' aexp=AExpression
		public Group getGroup() { return cGroup; }
		
		//var=ID
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//ID
		public RuleCall getVarIDTerminalRuleCall_0_0() { return cVarIDTerminalRuleCall_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//aexp=AExpression
		public Assignment getAexpAssignment_2() { return cAexpAssignment_2; }
		
		//AExpression
		public RuleCall getAexpAExpressionParserRuleCall_2_0() { return cAexpAExpressionParserRuleCall_2_0; }
	}
	public class SkipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.Skip");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSkipKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cSkipSAction_1 = (Action)cGroup.eContents().get(1);
		
		//Skip SkipS:
		//	'skip' {SkipS};
		@Override public ParserRule getRule() { return rule; }
		
		//'skip' {SkipS}
		public Group getGroup() { return cGroup; }
		
		//'skip'
		public Keyword getSkipKeyword_0() { return cSkipKeyword_0; }
		
		//{SkipS}
		public Action getSkipSAction_1() { return cSkipSAction_1; }
	}
	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBexpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBexpBExpressionParserRuleCall_1_0 = (RuleCall)cBexpAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBlockBlockParserRuleCall_3_0 = (RuleCall)cBlockAssignment_3.eContents().get(0);
		
		//While WhileS:
		//	'while' bexp=BExpression 'do' block=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//'while' bexp=BExpression 'do' block=Block
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//bexp=BExpression
		public Assignment getBexpAssignment_1() { return cBexpAssignment_1; }
		
		//BExpression
		public RuleCall getBexpBExpressionParserRuleCall_1_0() { return cBexpBExpressionParserRuleCall_1_0; }
		
		//'do'
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//block=Block
		public Assignment getBlockAssignment_3() { return cBlockAssignment_3; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_3_0() { return cBlockBlockParserRuleCall_3_0; }
	}
	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBexpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBexpBExpressionParserRuleCall_1_0 = (RuleCall)cBexpAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cS1Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cS1BlockParserRuleCall_3_0 = (RuleCall)cS1Assignment_3.eContents().get(0);
		private final Keyword cElseKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cS2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cS2BlockParserRuleCall_5_0 = (RuleCall)cS2Assignment_5.eContents().get(0);
		
		//If IfS:
		//	'if' bexp=BExpression 'then' s1=Block 'else' s2=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' bexp=BExpression 'then' s1=Block 'else' s2=Block
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//bexp=BExpression
		public Assignment getBexpAssignment_1() { return cBexpAssignment_1; }
		
		//BExpression
		public RuleCall getBexpBExpressionParserRuleCall_1_0() { return cBexpBExpressionParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//s1=Block
		public Assignment getS1Assignment_3() { return cS1Assignment_3; }
		
		//Block
		public RuleCall getS1BlockParserRuleCall_3_0() { return cS1BlockParserRuleCall_3_0; }
		
		//'else'
		public Keyword getElseKeyword_4() { return cElseKeyword_4; }
		
		//s2=Block
		public Assignment getS2Assignment_5() { return cS2Assignment_5; }
		
		//Block
		public RuleCall getS2BlockParserRuleCall_5_0() { return cS2BlockParserRuleCall_5_0; }
	}
	public class AExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.AExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cATermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOPPLUSTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AExpression AExpr:
		//	ATerm ({AExpression.left=current} op=OPPLUS right=AExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//ATerm ({AExpression.left=current} op=OPPLUS right=AExpression)?
		public Group getGroup() { return cGroup; }
		
		//ATerm
		public RuleCall getATermParserRuleCall_0() { return cATermParserRuleCall_0; }
		
		//({AExpression.left=current} op=OPPLUS right=AExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{AExpression.left=current}
		public Action getAExpressionLeftAction_1_0() { return cAExpressionLeftAction_1_0; }
		
		//op=OPPLUS
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//OPPLUS
		public RuleCall getOpOPPLUSTerminalRuleCall_1_1_0() { return cOpOPPLUSTerminalRuleCall_1_1_0; }
		
		//right=AExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AExpression
		public RuleCall getRightAExpressionParserRuleCall_1_2_0() { return cRightAExpressionParserRuleCall_1_2_0; }
	}
	public class ATermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.ATerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cATermLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOPMULTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightATermParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ATerm AExpr:
		//	APrimary ({ATerm.left=current} op=OPMUL right=ATerm)?;
		@Override public ParserRule getRule() { return rule; }
		
		//APrimary ({ATerm.left=current} op=OPMUL right=ATerm)?
		public Group getGroup() { return cGroup; }
		
		//APrimary
		public RuleCall getAPrimaryParserRuleCall_0() { return cAPrimaryParserRuleCall_0; }
		
		//({ATerm.left=current} op=OPMUL right=ATerm)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{ATerm.left=current}
		public Action getATermLeftAction_1_0() { return cATermLeftAction_1_0; }
		
		//op=OPMUL
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//OPMUL
		public RuleCall getOpOPMULTerminalRuleCall_1_1_0() { return cOpOPMULTerminalRuleCall_1_1_0; }
		
		//right=ATerm
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ATerm
		public RuleCall getRightATermParserRuleCall_1_2_0() { return cRightATermParserRuleCall_1_2_0; }
	}
	public class APrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.APrimary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarRefExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumLitExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cAExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//APrimary AExpr:
		//	VarRefExpr | NumLitExpr | '(' AExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//VarRefExpr | NumLitExpr | '(' AExpression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VarRefExpr
		public RuleCall getVarRefExprParserRuleCall_0() { return cVarRefExprParserRuleCall_0; }
		
		//NumLitExpr
		public RuleCall getNumLitExprParserRuleCall_1() { return cNumLitExprParserRuleCall_1; }
		
		//'(' AExpression ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//AExpression
		public RuleCall getAExpressionParserRuleCall_2_1() { return cAExpressionParserRuleCall_2_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class VarRefExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.VarRefExpr");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVarIDTerminalRuleCall_0 = (RuleCall)cVarAssignment.eContents().get(0);
		
		//VarRefExpr:
		//	var=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//var=ID
		public Assignment getVarAssignment() { return cVarAssignment; }
		
		//ID
		public RuleCall getVarIDTerminalRuleCall_0() { return cVarIDTerminalRuleCall_0; }
	}
	public class NumLitExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.NumLitExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNegatedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNegatedHyphenMinusKeyword_0_0 = (Keyword)cNegatedAssignment_0.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		
		//NumLitExpr:
		//	negated?='-'? val=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//negated?='-'? val=INT
		public Group getGroup() { return cGroup; }
		
		//negated?='-'?
		public Assignment getNegatedAssignment_0() { return cNegatedAssignment_0; }
		
		//'-'
		public Keyword getNegatedHyphenMinusKeyword_0_0() { return cNegatedHyphenMinusKeyword_0_0; }
		
		//val=INT
		public Assignment getValAssignment_1() { return cValAssignment_1; }
		
		//INT
		public RuleCall getValINTTerminalRuleCall_1_0() { return cValINTTerminalRuleCall_1_0; }
	}
	public class BExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.BExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpORTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BExpression BExpr:
		//	BTerm ({BExpression.left=current} op=OR right=BExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//BTerm ({BExpression.left=current} op=OR right=BExpression)?
		public Group getGroup() { return cGroup; }
		
		//BTerm
		public RuleCall getBTermParserRuleCall_0() { return cBTermParserRuleCall_0; }
		
		//({BExpression.left=current} op=OR right=BExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{BExpression.left=current}
		public Action getBExpressionLeftAction_1_0() { return cBExpressionLeftAction_1_0; }
		
		//op=OR
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//OR
		public RuleCall getOpORTerminalRuleCall_1_1_0() { return cOpORTerminalRuleCall_1_1_0; }
		
		//right=BExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//BExpression
		public RuleCall getRightBExpressionParserRuleCall_1_2_0() { return cRightBExpressionParserRuleCall_1_2_0; }
	}
	public class BTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.BTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBRelExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBTermLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpANDTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBTermParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BTerm BExpr:
		//	BRelExp ({BTerm.left=current} op=AND right=BTerm)?;
		@Override public ParserRule getRule() { return rule; }
		
		//BRelExp ({BTerm.left=current} op=AND right=BTerm)?
		public Group getGroup() { return cGroup; }
		
		//BRelExp
		public RuleCall getBRelExpParserRuleCall_0() { return cBRelExpParserRuleCall_0; }
		
		//({BTerm.left=current} op=AND right=BTerm)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{BTerm.left=current}
		public Action getBTermLeftAction_1_0() { return cBTermLeftAction_1_0; }
		
		//op=AND
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//AND
		public RuleCall getOpANDTerminalRuleCall_1_1_0() { return cOpANDTerminalRuleCall_1_1_0; }
		
		//right=BTerm
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//BTerm
		public RuleCall getRightBTermParserRuleCall_1_2_0() { return cRightBTermParserRuleCall_1_2_0; }
	}
	public class BRelExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.BRelExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBPrimaryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNotExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBCompExpParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cBExpressionParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//BRelExp BExpr:
		//	BPrimary | NotExpr | BCompExp | '(' BExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//BPrimary | NotExpr | BCompExp | '(' BExpression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BPrimary
		public RuleCall getBPrimaryParserRuleCall_0() { return cBPrimaryParserRuleCall_0; }
		
		//NotExpr
		public RuleCall getNotExprParserRuleCall_1() { return cNotExprParserRuleCall_1; }
		
		//BCompExp
		public RuleCall getBCompExpParserRuleCall_2() { return cBCompExpParserRuleCall_2; }
		
		//'(' BExpression ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//BExpression
		public RuleCall getBExpressionParserRuleCall_3_1() { return cBExpressionParserRuleCall_3_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class NotExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.NotExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBexpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBexpBRelExpParserRuleCall_1_0 = (RuleCall)cBexpAssignment_1.eContents().get(0);
		
		//NotExpr:
		//	'not' bexp=BRelExp;
		@Override public ParserRule getRule() { return rule; }
		
		//'not' bexp=BRelExp
		public Group getGroup() { return cGroup; }
		
		//'not'
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }
		
		//bexp=BRelExp
		public Assignment getBexpAssignment_1() { return cBexpAssignment_1; }
		
		//BRelExp
		public RuleCall getBexpBRelExpParserRuleCall_1_0() { return cBexpBRelExpParserRuleCall_1_0; }
	}
	public class BCompExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.BCompExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftAExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpOP_RTerminalRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightAExpressionParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//BCompExp:
		//	left=AExpression op=OP_R right=AExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//left=AExpression op=OP_R right=AExpression
		public Group getGroup() { return cGroup; }
		
		//left=AExpression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//AExpression
		public RuleCall getLeftAExpressionParserRuleCall_0_0() { return cLeftAExpressionParserRuleCall_0_0; }
		
		//op=OP_R
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//OP_R
		public RuleCall getOpOP_RTerminalRuleCall_1_0() { return cOpOP_RTerminalRuleCall_1_0; }
		
		//right=AExpression
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//AExpression
		public RuleCall getRightAExpressionParserRuleCall_2_0() { return cRightAExpressionParserRuleCall_2_0; }
	}
	public class BPrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.BPrimary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBvalAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cBvalTrueKeyword_0_0 = (Keyword)cBvalAssignment_0.eContents().get(0);
		private final Assignment cBvalAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cBvalFalseKeyword_1_0 = (Keyword)cBvalAssignment_1.eContents().get(0);
		
		//BPrimary:
		//	bval='true' | bval='false';
		@Override public ParserRule getRule() { return rule; }
		
		//bval='true' | bval='false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//bval='true'
		public Assignment getBvalAssignment_0() { return cBvalAssignment_0; }
		
		//'true'
		public Keyword getBvalTrueKeyword_0_0() { return cBvalTrueKeyword_0_0; }
		
		//bval='false'
		public Assignment getBvalAssignment_1() { return cBvalAssignment_1; }
		
		//'false'
		public Keyword getBvalFalseKeyword_1_0() { return cBvalFalseKeyword_1_0; }
	}
	
	
	private final ProgramElements pProgram;
	private final StmtElements pStmt;
	private final BlockElements pBlock;
	private final AssignmentElements pAssignment;
	private final SkipElements pSkip;
	private final WhileElements pWhile;
	private final IfElements pIf;
	private final AExpressionElements pAExpression;
	private final ATermElements pATerm;
	private final APrimaryElements pAPrimary;
	private final VarRefExprElements pVarRefExpr;
	private final NumLitExprElements pNumLitExpr;
	private final BExpressionElements pBExpression;
	private final BTermElements pBTerm;
	private final BRelExpElements pBRelExp;
	private final NotExprElements pNotExpr;
	private final BCompExpElements pBCompExp;
	private final BPrimaryElements pBPrimary;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tOPPLUS;
	private final TerminalRule tOPMUL;
	private final TerminalRule tOR;
	private final TerminalRule tAND;
	private final TerminalRule tOP_R;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public WhileLangGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pStmt = new StmtElements();
		this.pBlock = new BlockElements();
		this.pAssignment = new AssignmentElements();
		this.pSkip = new SkipElements();
		this.pWhile = new WhileElements();
		this.pIf = new IfElements();
		this.pAExpression = new AExpressionElements();
		this.pATerm = new ATermElements();
		this.pAPrimary = new APrimaryElements();
		this.pVarRefExpr = new VarRefExprElements();
		this.pNumLitExpr = new NumLitExprElements();
		this.pBExpression = new BExpressionElements();
		this.pBTerm = new BTermElements();
		this.pBRelExp = new BRelExpElements();
		this.pNotExpr = new NotExprElements();
		this.pBCompExp = new BCompExpElements();
		this.pBPrimary = new BPrimaryElements();
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.SL_COMMENT");
		this.tOPPLUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.OPPLUS");
		this.tOPMUL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.OPMUL");
		this.tOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.OR");
		this.tAND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.AND");
		this.tOP_R = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.OP_R");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.ucf.cs.whilelang.WhileLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	Stmt;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Stmt S:
	//	Assignment | Skip | Block | While | If;
	public StmtElements getStmtAccess() {
		return pStmt;
	}
	
	public ParserRule getStmtRule() {
		return getStmtAccess().getRule();
	}
	
	//Block CompoundS:
	//	'{' stmts+=Stmt (';' stmts+=Stmt)* '}';
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//Assignment AssignS:
	//	var=ID ':=' aexp=AExpression;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//Skip SkipS:
	//	'skip' {SkipS};
	public SkipElements getSkipAccess() {
		return pSkip;
	}
	
	public ParserRule getSkipRule() {
		return getSkipAccess().getRule();
	}
	
	//While WhileS:
	//	'while' bexp=BExpression 'do' block=Block;
	public WhileElements getWhileAccess() {
		return pWhile;
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}
	
	//If IfS:
	//	'if' bexp=BExpression 'then' s1=Block 'else' s2=Block;
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}
	
	//AExpression AExpr:
	//	ATerm ({AExpression.left=current} op=OPPLUS right=AExpression)?;
	public AExpressionElements getAExpressionAccess() {
		return pAExpression;
	}
	
	public ParserRule getAExpressionRule() {
		return getAExpressionAccess().getRule();
	}
	
	//ATerm AExpr:
	//	APrimary ({ATerm.left=current} op=OPMUL right=ATerm)?;
	public ATermElements getATermAccess() {
		return pATerm;
	}
	
	public ParserRule getATermRule() {
		return getATermAccess().getRule();
	}
	
	//APrimary AExpr:
	//	VarRefExpr | NumLitExpr | '(' AExpression ')';
	public APrimaryElements getAPrimaryAccess() {
		return pAPrimary;
	}
	
	public ParserRule getAPrimaryRule() {
		return getAPrimaryAccess().getRule();
	}
	
	//VarRefExpr:
	//	var=ID;
	public VarRefExprElements getVarRefExprAccess() {
		return pVarRefExpr;
	}
	
	public ParserRule getVarRefExprRule() {
		return getVarRefExprAccess().getRule();
	}
	
	//NumLitExpr:
	//	negated?='-'? val=INT;
	public NumLitExprElements getNumLitExprAccess() {
		return pNumLitExpr;
	}
	
	public ParserRule getNumLitExprRule() {
		return getNumLitExprAccess().getRule();
	}
	
	//BExpression BExpr:
	//	BTerm ({BExpression.left=current} op=OR right=BExpression)?;
	public BExpressionElements getBExpressionAccess() {
		return pBExpression;
	}
	
	public ParserRule getBExpressionRule() {
		return getBExpressionAccess().getRule();
	}
	
	//BTerm BExpr:
	//	BRelExp ({BTerm.left=current} op=AND right=BTerm)?;
	public BTermElements getBTermAccess() {
		return pBTerm;
	}
	
	public ParserRule getBTermRule() {
		return getBTermAccess().getRule();
	}
	
	//BRelExp BExpr:
	//	BPrimary | NotExpr | BCompExp | '(' BExpression ')';
	public BRelExpElements getBRelExpAccess() {
		return pBRelExp;
	}
	
	public ParserRule getBRelExpRule() {
		return getBRelExpAccess().getRule();
	}
	
	//NotExpr:
	//	'not' bexp=BRelExp;
	public NotExprElements getNotExprAccess() {
		return pNotExpr;
	}
	
	public ParserRule getNotExprRule() {
		return getNotExprAccess().getRule();
	}
	
	//BCompExp:
	//	left=AExpression op=OP_R right=AExpression;
	public BCompExpElements getBCompExpAccess() {
		return pBCompExp;
	}
	
	public ParserRule getBCompExpRule() {
		return getBCompExpAccess().getRule();
	}
	
	//BPrimary:
	//	bval='true' | bval='false';
	public BPrimaryElements getBPrimaryAccess() {
		return pBPrimary;
	}
	
	public ParserRule getBPrimaryRule() {
		return getBPrimaryAccess().getRule();
	}
	
	//@ Override terminal SL_COMMENT:
	//	'%' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal OPPLUS:
	//	'+' | '-';
	public TerminalRule getOPPLUSRule() {
		return tOPPLUS;
	}
	
	//terminal OPMUL:
	//	'*';
	public TerminalRule getOPMULRule() {
		return tOPMUL;
	}
	
	//terminal OR:
	//	'or';
	public TerminalRule getORRule() {
		return tOR;
	}
	
	//terminal AND:
	//	'and';
	public TerminalRule getANDRule() {
		return tAND;
	}
	
	//terminal OP_R:
	//	'<=' | '==' | '>=' | '<' | '>' | '!=';
	public TerminalRule getOP_RRule() {
		return tOP_R;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
