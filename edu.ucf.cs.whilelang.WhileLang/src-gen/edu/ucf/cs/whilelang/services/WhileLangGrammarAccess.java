/*
 * generated by Xtext 2.13.0
 */
package edu.ucf.cs.whilelang.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class WhileLangGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgsFormalsParserRuleCall_3_0 = (RuleCall)cArgsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cIsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyStmtParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		
		//Program:
		//	'proc' name=ID '(' args=Formals? ')' 'is' body=Stmt;
		@Override public ParserRule getRule() { return rule; }
		
		//'proc' name=ID '(' args=Formals? ')' 'is' body=Stmt
		public Group getGroup() { return cGroup; }
		
		//'proc'
		public Keyword getProcKeyword_0() { return cProcKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//args=Formals?
		public Assignment getArgsAssignment_3() { return cArgsAssignment_3; }
		
		//Formals
		public RuleCall getArgsFormalsParserRuleCall_3_0() { return cArgsFormalsParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'is'
		public Keyword getIsKeyword_5() { return cIsKeyword_5; }
		
		//body=Stmt
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//Stmt
		public RuleCall getBodyStmtParserRuleCall_6_0() { return cBodyStmtParserRuleCall_6_0; }
	}
	public class FormalsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.Formals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamesIDTerminalRuleCall_0_0 = (RuleCall)cNamesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNamesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNamesIDTerminalRuleCall_1_1_0 = (RuleCall)cNamesAssignment_1_1.eContents().get(0);
		
		//Formals:
		//	names+=ID (',' names+=ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//names+=ID (',' names+=ID)*
		public Group getGroup() { return cGroup; }
		
		//names+=ID
		public Assignment getNamesAssignment_0() { return cNamesAssignment_0; }
		
		//ID
		public RuleCall getNamesIDTerminalRuleCall_0_0() { return cNamesIDTerminalRuleCall_0_0; }
		
		//(',' names+=ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//names+=ID
		public Assignment getNamesAssignment_1_1() { return cNamesAssignment_1_1; }
		
		//ID
		public RuleCall getNamesIDTerminalRuleCall_1_1_0() { return cNamesIDTerminalRuleCall_1_1_0; }
	}
	public class StmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.Stmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSkipParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBlockParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWhileParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIfParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAssertParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Stmt S:
		//	Assignment | Skip | Block | While | If | Assert;
		@Override public ParserRule getRule() { return rule; }
		
		//Assignment | Skip | Block | While | If | Assert
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Assignment
		public RuleCall getAssignmentParserRuleCall_0() { return cAssignmentParserRuleCall_0; }
		
		//Skip
		public RuleCall getSkipParserRuleCall_1() { return cSkipParserRuleCall_1; }
		
		//Block
		public RuleCall getBlockParserRuleCall_2() { return cBlockParserRuleCall_2; }
		
		//While
		public RuleCall getWhileParserRuleCall_3() { return cWhileParserRuleCall_3; }
		
		//If
		public RuleCall getIfParserRuleCall_4() { return cIfParserRuleCall_4; }
		
		//Assert
		public RuleCall getAssertParserRuleCall_5() { return cAssertParserRuleCall_5; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStmtsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStmtsStmtParserRuleCall_1_0 = (RuleCall)cStmtsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStmtsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStmtsStmtParserRuleCall_2_1_0 = (RuleCall)cStmtsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Block CompoundS:
		//	'{' stmts+=Stmt (';' stmts+=Stmt)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' stmts+=Stmt (';' stmts+=Stmt)* '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//stmts+=Stmt
		public Assignment getStmtsAssignment_1() { return cStmtsAssignment_1; }
		
		//Stmt
		public RuleCall getStmtsStmtParserRuleCall_1_0() { return cStmtsStmtParserRuleCall_1_0; }
		
		//(';' stmts+=Stmt)*
		public Group getGroup_2() { return cGroup_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//stmts+=Stmt
		public Assignment getStmtsAssignment_2_1() { return cStmtsAssignment_2_1; }
		
		//Stmt
		public RuleCall getStmtsStmtParserRuleCall_2_1_0() { return cStmtsStmtParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.Assignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cVAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cVIDTerminalRuleCall_0_0_0 = (RuleCall)cVAssignment_0_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cAexpAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cAexpExpressionParserRuleCall_0_2_0 = (RuleCall)cAexpAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVIDTerminalRuleCall_1_1_0 = (RuleCall)cVAssignment_1_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cAexpAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cAexpExpressionParserRuleCall_1_3_0 = (RuleCall)cAexpAssignment_1_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Keyword cCircumflexAccentKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cLabelAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cLabelINTTerminalRuleCall_1_6_0 = (RuleCall)cLabelAssignment_1_6.eContents().get(0);
		
		//Assignment AssignS:
		//	v=ID ':=' aexp=Expression | '[' v=ID ':=' aexp=Expression ']' '^' label=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//v=ID ':=' aexp=Expression | '[' v=ID ':=' aexp=Expression ']' '^' label=INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//v=ID ':=' aexp=Expression
		public Group getGroup_0() { return cGroup_0; }
		
		//v=ID
		public Assignment getVAssignment_0_0() { return cVAssignment_0_0; }
		
		//ID
		public RuleCall getVIDTerminalRuleCall_0_0_0() { return cVIDTerminalRuleCall_0_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_0_1() { return cColonEqualsSignKeyword_0_1; }
		
		//aexp=Expression
		public Assignment getAexpAssignment_0_2() { return cAexpAssignment_0_2; }
		
		//Expression
		public RuleCall getAexpExpressionParserRuleCall_0_2_0() { return cAexpExpressionParserRuleCall_0_2_0; }
		
		//'[' v=ID ':=' aexp=Expression ']' '^' label=INT
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//v=ID
		public Assignment getVAssignment_1_1() { return cVAssignment_1_1; }
		
		//ID
		public RuleCall getVIDTerminalRuleCall_1_1_0() { return cVIDTerminalRuleCall_1_1_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1_2() { return cColonEqualsSignKeyword_1_2; }
		
		//aexp=Expression
		public Assignment getAexpAssignment_1_3() { return cAexpAssignment_1_3; }
		
		//Expression
		public RuleCall getAexpExpressionParserRuleCall_1_3_0() { return cAexpExpressionParserRuleCall_1_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_4() { return cRightSquareBracketKeyword_1_4; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_1_5() { return cCircumflexAccentKeyword_1_5; }
		
		//label=INT
		public Assignment getLabelAssignment_1_6() { return cLabelAssignment_1_6; }
		
		//INT
		public RuleCall getLabelINTTerminalRuleCall_1_6_0() { return cLabelINTTerminalRuleCall_1_6_0; }
	}
	public class SkipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.Skip");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cSkipKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Action cSkipSAction_0_1 = (Action)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cSkipKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cCircumflexAccentKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cLabelAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cLabelINTTerminalRuleCall_1_4_0 = (RuleCall)cLabelAssignment_1_4.eContents().get(0);
		
		//Skip SkipS:
		//	'skip' {SkipS} | '[' 'skip' ']' '^' label=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'skip' {SkipS} | '[' 'skip' ']' '^' label=INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'skip' {SkipS}
		public Group getGroup_0() { return cGroup_0; }
		
		//'skip'
		public Keyword getSkipKeyword_0_0() { return cSkipKeyword_0_0; }
		
		//{SkipS}
		public Action getSkipSAction_0_1() { return cSkipSAction_0_1; }
		
		//'[' 'skip' ']' '^' label=INT
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//'skip'
		public Keyword getSkipKeyword_1_1() { return cSkipKeyword_1_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_1_3() { return cCircumflexAccentKeyword_1_3; }
		
		//label=INT
		public Assignment getLabelAssignment_1_4() { return cLabelAssignment_1_4; }
		
		//INT
		public RuleCall getLabelINTTerminalRuleCall_1_4_0() { return cLabelINTTerminalRuleCall_1_4_0; }
	}
	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBexpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBexpLabeledExpParserRuleCall_1_0 = (RuleCall)cBexpAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBlockBlockParserRuleCall_3_0 = (RuleCall)cBlockAssignment_3.eContents().get(0);
		
		//While WhileS:
		//	'while' bexp=LabeledExp 'do' block=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//'while' bexp=LabeledExp 'do' block=Block
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//bexp=LabeledExp
		public Assignment getBexpAssignment_1() { return cBexpAssignment_1; }
		
		//LabeledExp
		public RuleCall getBexpLabeledExpParserRuleCall_1_0() { return cBexpLabeledExpParserRuleCall_1_0; }
		
		//'do'
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//block=Block
		public Assignment getBlockAssignment_3() { return cBlockAssignment_3; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_3_0() { return cBlockBlockParserRuleCall_3_0; }
	}
	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBexpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBexpLabeledExpParserRuleCall_1_0 = (RuleCall)cBexpAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cS1Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cS1StmtParserRuleCall_3_0 = (RuleCall)cS1Assignment_3.eContents().get(0);
		private final Keyword cElseKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cS2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cS2StmtParserRuleCall_5_0 = (RuleCall)cS2Assignment_5.eContents().get(0);
		
		//If IfS:
		//	'if' bexp=LabeledExp 'then' s1=Stmt 'else' s2=Stmt;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' bexp=LabeledExp 'then' s1=Stmt 'else' s2=Stmt
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//bexp=LabeledExp
		public Assignment getBexpAssignment_1() { return cBexpAssignment_1; }
		
		//LabeledExp
		public RuleCall getBexpLabeledExpParserRuleCall_1_0() { return cBexpLabeledExpParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//s1=Stmt
		public Assignment getS1Assignment_3() { return cS1Assignment_3; }
		
		//Stmt
		public RuleCall getS1StmtParserRuleCall_3_0() { return cS1StmtParserRuleCall_3_0; }
		
		//'else'
		public Keyword getElseKeyword_4() { return cElseKeyword_4; }
		
		//s2=Stmt
		public Assignment getS2Assignment_5() { return cS2Assignment_5; }
		
		//Stmt
		public RuleCall getS2StmtParserRuleCall_5_0() { return cS2StmtParserRuleCall_5_0; }
	}
	public class AssertElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.Assert");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBexpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBexpLabeledExpParserRuleCall_1_0 = (RuleCall)cBexpAssignment_1.eContents().get(0);
		
		//Assert AssertS:
		//	'assert' bexp=LabeledExp;
		@Override public ParserRule getRule() { return rule; }
		
		//'assert' bexp=LabeledExp
		public Group getGroup() { return cGroup; }
		
		//'assert'
		public Keyword getAssertKeyword_0() { return cAssertKeyword_0; }
		
		//bexp=LabeledExp
		public Assignment getBexpAssignment_1() { return cBexpAssignment_1; }
		
		//LabeledExp
		public RuleCall getBexpLabeledExpParserRuleCall_1_0() { return cBexpLabeledExpParserRuleCall_1_0; }
	}
	public class LabeledExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.LabeledExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cBeExpressionParserRuleCall_0_0 = (RuleCall)cBeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cBeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBeExpressionParserRuleCall_1_1_0 = (RuleCall)cBeAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cCircumflexAccentKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cLabelAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cLabelINTTerminalRuleCall_1_4_0 = (RuleCall)cLabelAssignment_1_4.eContents().get(0);
		
		//LabeledExp:
		//	be=Expression | '[' be=Expression ']' '^' label=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//be=Expression | '[' be=Expression ']' '^' label=INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//be=Expression
		public Assignment getBeAssignment_0() { return cBeAssignment_0; }
		
		//Expression
		public RuleCall getBeExpressionParserRuleCall_0_0() { return cBeExpressionParserRuleCall_0_0; }
		
		//'[' be=Expression ']' '^' label=INT
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//be=Expression
		public Assignment getBeAssignment_1_1() { return cBeAssignment_1_1; }
		
		//Expression
		public RuleCall getBeExpressionParserRuleCall_1_1_0() { return cBeExpressionParserRuleCall_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_1_3() { return cCircumflexAccentKeyword_1_3; }
		
		//label=INT
		public Assignment getLabelAssignment_1_4() { return cLabelAssignment_1_4; }
		
		//INT
		public RuleCall getLabelINTTerminalRuleCall_1_4_0() { return cLabelINTTerminalRuleCall_1_4_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.Expression");
		private final RuleCall cBDisjParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression Expr:
		//	BDisj;
		@Override public ParserRule getRule() { return rule; }
		
		//BDisj
		public RuleCall getBDisjParserRuleCall() { return cBDisjParserRuleCall; }
	}
	public class BDisjElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.BDisj");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBConjParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBDisjLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpORTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBConjParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BDisj Expr:
		//	BConj ({BDisj.left=current} op=OR right=BConj)*;
		@Override public ParserRule getRule() { return rule; }
		
		//BConj ({BDisj.left=current} op=OR right=BConj)*
		public Group getGroup() { return cGroup; }
		
		//BConj
		public RuleCall getBConjParserRuleCall_0() { return cBConjParserRuleCall_0; }
		
		//({BDisj.left=current} op=OR right=BConj)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BDisj.left=current}
		public Action getBDisjLeftAction_1_0() { return cBDisjLeftAction_1_0; }
		
		//op=OR
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//OR
		public RuleCall getOpORTerminalRuleCall_1_1_0() { return cOpORTerminalRuleCall_1_1_0; }
		
		//right=BConj
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//BConj
		public RuleCall getRightBConjParserRuleCall_1_2_0() { return cRightBConjParserRuleCall_1_2_0; }
	}
	public class BConjElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.BConj");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBRelExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBConjLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpANDTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBRelExpParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BConj Expr:
		//	BRelExp ({BConj.left=current} op=AND right=BRelExp)*;
		@Override public ParserRule getRule() { return rule; }
		
		//BRelExp ({BConj.left=current} op=AND right=BRelExp)*
		public Group getGroup() { return cGroup; }
		
		//BRelExp
		public RuleCall getBRelExpParserRuleCall_0() { return cBRelExpParserRuleCall_0; }
		
		//({BConj.left=current} op=AND right=BRelExp)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BConj.left=current}
		public Action getBConjLeftAction_1_0() { return cBConjLeftAction_1_0; }
		
		//op=AND
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//AND
		public RuleCall getOpANDTerminalRuleCall_1_1_0() { return cOpANDTerminalRuleCall_1_1_0; }
		
		//right=BRelExp
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//BRelExp
		public RuleCall getRightBRelExpParserRuleCall_1_2_0() { return cRightBRelExpParserRuleCall_1_2_0; }
	}
	public class BRelExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.BRelExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBRelExpLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOP_RTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BRelExp Expr:
		//	AExpression ({BRelExp.left=current} op=OP_R right=AExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//AExpression ({BRelExp.left=current} op=OP_R right=AExpression)?
		public Group getGroup() { return cGroup; }
		
		//AExpression
		public RuleCall getAExpressionParserRuleCall_0() { return cAExpressionParserRuleCall_0; }
		
		//({BRelExp.left=current} op=OP_R right=AExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{BRelExp.left=current}
		public Action getBRelExpLeftAction_1_0() { return cBRelExpLeftAction_1_0; }
		
		//op=OP_R
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//OP_R
		public RuleCall getOpOP_RTerminalRuleCall_1_1_0() { return cOpOP_RTerminalRuleCall_1_1_0; }
		
		//right=AExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AExpression
		public RuleCall getRightAExpressionParserRuleCall_1_2_0() { return cRightAExpressionParserRuleCall_1_2_0; }
	}
	public class AExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.AExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFactorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOPPLUSTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightFactorParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AExpression Expr:
		//	Factor ({AExpression.left=current} op=OPPLUS right=Factor)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Factor ({AExpression.left=current} op=OPPLUS right=Factor)*
		public Group getGroup() { return cGroup; }
		
		//Factor
		public RuleCall getFactorParserRuleCall_0() { return cFactorParserRuleCall_0; }
		
		//({AExpression.left=current} op=OPPLUS right=Factor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AExpression.left=current}
		public Action getAExpressionLeftAction_1_0() { return cAExpressionLeftAction_1_0; }
		
		//op=OPPLUS
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//OPPLUS
		public RuleCall getOpOPPLUSTerminalRuleCall_1_1_0() { return cOpOPPLUSTerminalRuleCall_1_1_0; }
		
		//right=Factor
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Factor
		public RuleCall getRightFactorParserRuleCall_1_2_0() { return cRightFactorParserRuleCall_1_2_0; }
	}
	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.Factor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFactorLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOPMULTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Factor Expr:
		//	Primary ({Factor.left=current} op=OPMUL right=Primary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({Factor.left=current} op=OPMUL right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({Factor.left=current} op=OPMUL right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Factor.left=current}
		public Action getFactorLeftAction_1_0() { return cFactorLeftAction_1_0; }
		
		//op=OPMUL
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//OPMUL
		public RuleCall getOpOPMULTerminalRuleCall_1_1_0() { return cOpOPMULTerminalRuleCall_1_1_0; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarRefExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumLitExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSignedNumParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBoolLitExprParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNotExprParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//Primary Expr:
		//	VarRefExpr | NumLitExpr | SignedNum | BoolLitExpr | NotExpr
		//	| '(' Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//VarRefExpr | NumLitExpr | SignedNum | BoolLitExpr | NotExpr | '(' Expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VarRefExpr
		public RuleCall getVarRefExprParserRuleCall_0() { return cVarRefExprParserRuleCall_0; }
		
		//NumLitExpr
		public RuleCall getNumLitExprParserRuleCall_1() { return cNumLitExprParserRuleCall_1; }
		
		//SignedNum
		public RuleCall getSignedNumParserRuleCall_2() { return cSignedNumParserRuleCall_2; }
		
		//BoolLitExpr
		public RuleCall getBoolLitExprParserRuleCall_3() { return cBoolLitExprParserRuleCall_3; }
		
		//NotExpr
		public RuleCall getNotExprParserRuleCall_4() { return cNotExprParserRuleCall_4; }
		
		//'(' Expression ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_5_1() { return cExpressionParserRuleCall_5_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }
	}
	public class VarRefExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.VarRefExpr");
		private final Assignment cVnameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVnameIDTerminalRuleCall_0 = (RuleCall)cVnameAssignment.eContents().get(0);
		
		//VarRefExpr:
		//	vname=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//vname=ID
		public Assignment getVnameAssignment() { return cVnameAssignment; }
		
		//ID
		public RuleCall getVnameIDTerminalRuleCall_0() { return cVnameIDTerminalRuleCall_0; }
	}
	public class SignedNumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.SignedNum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSignOPPLUSTerminalRuleCall_0_0 = (RuleCall)cSignAssignment_0.eContents().get(0);
		private final Assignment cNvalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNvalPrimaryParserRuleCall_1_0 = (RuleCall)cNvalAssignment_1.eContents().get(0);
		
		//SignedNum:
		//	sign=OPPLUS nval=Primary;
		@Override public ParserRule getRule() { return rule; }
		
		//sign=OPPLUS nval=Primary
		public Group getGroup() { return cGroup; }
		
		//sign=OPPLUS
		public Assignment getSignAssignment_0() { return cSignAssignment_0; }
		
		//OPPLUS
		public RuleCall getSignOPPLUSTerminalRuleCall_0_0() { return cSignOPPLUSTerminalRuleCall_0_0; }
		
		//nval=Primary
		public Assignment getNvalAssignment_1() { return cNvalAssignment_1; }
		
		//Primary
		public RuleCall getNvalPrimaryParserRuleCall_1_0() { return cNvalPrimaryParserRuleCall_1_0; }
	}
	public class NumLitExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.NumLitExpr");
		private final Assignment cNumAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNumINTTerminalRuleCall_0 = (RuleCall)cNumAssignment.eContents().get(0);
		
		//NumLitExpr:
		//	num=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//num=INT
		public Assignment getNumAssignment() { return cNumAssignment; }
		
		//INT
		public RuleCall getNumINTTerminalRuleCall_0() { return cNumINTTerminalRuleCall_0; }
	}
	public class BoolLitExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.BoolLitExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBvalAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cBvalTrueKeyword_0_0 = (Keyword)cBvalAssignment_0.eContents().get(0);
		private final Assignment cBvalAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cBvalFalseKeyword_1_0 = (Keyword)cBvalAssignment_1.eContents().get(0);
		
		//BoolLitExpr:
		//	bval='true' | bval='false';
		@Override public ParserRule getRule() { return rule; }
		
		//bval='true' | bval='false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//bval='true'
		public Assignment getBvalAssignment_0() { return cBvalAssignment_0; }
		
		//'true'
		public Keyword getBvalTrueKeyword_0_0() { return cBvalTrueKeyword_0_0; }
		
		//bval='false'
		public Assignment getBvalAssignment_1() { return cBvalAssignment_1; }
		
		//'false'
		public Keyword getBvalFalseKeyword_1_0() { return cBvalFalseKeyword_1_0; }
	}
	public class NotExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.NotExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBexpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBexpPrimaryParserRuleCall_1_0 = (RuleCall)cBexpAssignment_1.eContents().get(0);
		
		//NotExpr:
		//	'not' bexp=Primary;
		@Override public ParserRule getRule() { return rule; }
		
		//'not' bexp=Primary
		public Group getGroup() { return cGroup; }
		
		//'not'
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }
		
		//bexp=Primary
		public Assignment getBexpAssignment_1() { return cBexpAssignment_1; }
		
		//Primary
		public RuleCall getBexpPrimaryParserRuleCall_1_0() { return cBexpPrimaryParserRuleCall_1_0; }
	}
	public class ElementaryBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.ElementaryBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSkipParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLabeledExpParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ElementaryBlock:
		//	Assignment | Skip | LabeledExp;
		@Override public ParserRule getRule() { return rule; }
		
		//Assignment | Skip | LabeledExp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Assignment
		public RuleCall getAssignmentParserRuleCall_0() { return cAssignmentParserRuleCall_0; }
		
		//Skip
		public RuleCall getSkipParserRuleCall_1() { return cSkipParserRuleCall_1; }
		
		//LabeledExp
		public RuleCall getLabeledExpParserRuleCall_2() { return cLabeledExpParserRuleCall_2; }
	}
	
	
	private final ProgramElements pProgram;
	private final FormalsElements pFormals;
	private final StmtElements pStmt;
	private final BlockElements pBlock;
	private final AssignmentElements pAssignment;
	private final SkipElements pSkip;
	private final WhileElements pWhile;
	private final IfElements pIf;
	private final AssertElements pAssert;
	private final LabeledExpElements pLabeledExp;
	private final ExpressionElements pExpression;
	private final BDisjElements pBDisj;
	private final BConjElements pBConj;
	private final BRelExpElements pBRelExp;
	private final AExpressionElements pAExpression;
	private final FactorElements pFactor;
	private final PrimaryElements pPrimary;
	private final VarRefExprElements pVarRefExpr;
	private final SignedNumElements pSignedNum;
	private final NumLitExprElements pNumLitExpr;
	private final BoolLitExprElements pBoolLitExpr;
	private final NotExprElements pNotExpr;
	private final ElementaryBlockElements pElementaryBlock;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tOPPLUS;
	private final TerminalRule tOPMUL;
	private final TerminalRule tOR;
	private final TerminalRule tAND;
	private final TerminalRule tOP_R;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public WhileLangGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pFormals = new FormalsElements();
		this.pStmt = new StmtElements();
		this.pBlock = new BlockElements();
		this.pAssignment = new AssignmentElements();
		this.pSkip = new SkipElements();
		this.pWhile = new WhileElements();
		this.pIf = new IfElements();
		this.pAssert = new AssertElements();
		this.pLabeledExp = new LabeledExpElements();
		this.pExpression = new ExpressionElements();
		this.pBDisj = new BDisjElements();
		this.pBConj = new BConjElements();
		this.pBRelExp = new BRelExpElements();
		this.pAExpression = new AExpressionElements();
		this.pFactor = new FactorElements();
		this.pPrimary = new PrimaryElements();
		this.pVarRefExpr = new VarRefExprElements();
		this.pSignedNum = new SignedNumElements();
		this.pNumLitExpr = new NumLitExprElements();
		this.pBoolLitExpr = new BoolLitExprElements();
		this.pNotExpr = new NotExprElements();
		this.pElementaryBlock = new ElementaryBlockElements();
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.SL_COMMENT");
		this.tOPPLUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.OPPLUS");
		this.tOPMUL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.OPMUL");
		this.tOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.OR");
		this.tAND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.AND");
		this.tOP_R = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ucf.cs.whilelang.WhileLang.OP_R");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.ucf.cs.whilelang.WhileLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	'proc' name=ID '(' args=Formals? ')' 'is' body=Stmt;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Formals:
	//	names+=ID (',' names+=ID)*;
	public FormalsElements getFormalsAccess() {
		return pFormals;
	}
	
	public ParserRule getFormalsRule() {
		return getFormalsAccess().getRule();
	}
	
	//Stmt S:
	//	Assignment | Skip | Block | While | If | Assert;
	public StmtElements getStmtAccess() {
		return pStmt;
	}
	
	public ParserRule getStmtRule() {
		return getStmtAccess().getRule();
	}
	
	//Block CompoundS:
	//	'{' stmts+=Stmt (';' stmts+=Stmt)* '}';
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//Assignment AssignS:
	//	v=ID ':=' aexp=Expression | '[' v=ID ':=' aexp=Expression ']' '^' label=INT;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//Skip SkipS:
	//	'skip' {SkipS} | '[' 'skip' ']' '^' label=INT;
	public SkipElements getSkipAccess() {
		return pSkip;
	}
	
	public ParserRule getSkipRule() {
		return getSkipAccess().getRule();
	}
	
	//While WhileS:
	//	'while' bexp=LabeledExp 'do' block=Block;
	public WhileElements getWhileAccess() {
		return pWhile;
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}
	
	//If IfS:
	//	'if' bexp=LabeledExp 'then' s1=Stmt 'else' s2=Stmt;
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}
	
	//Assert AssertS:
	//	'assert' bexp=LabeledExp;
	public AssertElements getAssertAccess() {
		return pAssert;
	}
	
	public ParserRule getAssertRule() {
		return getAssertAccess().getRule();
	}
	
	//LabeledExp:
	//	be=Expression | '[' be=Expression ']' '^' label=INT;
	public LabeledExpElements getLabeledExpAccess() {
		return pLabeledExp;
	}
	
	public ParserRule getLabeledExpRule() {
		return getLabeledExpAccess().getRule();
	}
	
	//Expression Expr:
	//	BDisj;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//BDisj Expr:
	//	BConj ({BDisj.left=current} op=OR right=BConj)*;
	public BDisjElements getBDisjAccess() {
		return pBDisj;
	}
	
	public ParserRule getBDisjRule() {
		return getBDisjAccess().getRule();
	}
	
	//BConj Expr:
	//	BRelExp ({BConj.left=current} op=AND right=BRelExp)*;
	public BConjElements getBConjAccess() {
		return pBConj;
	}
	
	public ParserRule getBConjRule() {
		return getBConjAccess().getRule();
	}
	
	//BRelExp Expr:
	//	AExpression ({BRelExp.left=current} op=OP_R right=AExpression)?;
	public BRelExpElements getBRelExpAccess() {
		return pBRelExp;
	}
	
	public ParserRule getBRelExpRule() {
		return getBRelExpAccess().getRule();
	}
	
	//AExpression Expr:
	//	Factor ({AExpression.left=current} op=OPPLUS right=Factor)*;
	public AExpressionElements getAExpressionAccess() {
		return pAExpression;
	}
	
	public ParserRule getAExpressionRule() {
		return getAExpressionAccess().getRule();
	}
	
	//Factor Expr:
	//	Primary ({Factor.left=current} op=OPMUL right=Primary)*;
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}
	
	//Primary Expr:
	//	VarRefExpr | NumLitExpr | SignedNum | BoolLitExpr | NotExpr
	//	| '(' Expression ')';
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//VarRefExpr:
	//	vname=ID;
	public VarRefExprElements getVarRefExprAccess() {
		return pVarRefExpr;
	}
	
	public ParserRule getVarRefExprRule() {
		return getVarRefExprAccess().getRule();
	}
	
	//SignedNum:
	//	sign=OPPLUS nval=Primary;
	public SignedNumElements getSignedNumAccess() {
		return pSignedNum;
	}
	
	public ParserRule getSignedNumRule() {
		return getSignedNumAccess().getRule();
	}
	
	//NumLitExpr:
	//	num=INT;
	public NumLitExprElements getNumLitExprAccess() {
		return pNumLitExpr;
	}
	
	public ParserRule getNumLitExprRule() {
		return getNumLitExprAccess().getRule();
	}
	
	//BoolLitExpr:
	//	bval='true' | bval='false';
	public BoolLitExprElements getBoolLitExprAccess() {
		return pBoolLitExpr;
	}
	
	public ParserRule getBoolLitExprRule() {
		return getBoolLitExprAccess().getRule();
	}
	
	//NotExpr:
	//	'not' bexp=Primary;
	public NotExprElements getNotExprAccess() {
		return pNotExpr;
	}
	
	public ParserRule getNotExprRule() {
		return getNotExprAccess().getRule();
	}
	
	//ElementaryBlock:
	//	Assignment | Skip | LabeledExp;
	public ElementaryBlockElements getElementaryBlockAccess() {
		return pElementaryBlock;
	}
	
	public ParserRule getElementaryBlockRule() {
		return getElementaryBlockAccess().getRule();
	}
	
	//@ Override terminal SL_COMMENT:
	//	'%' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal OPPLUS:
	//	'+' | '-';
	public TerminalRule getOPPLUSRule() {
		return tOPPLUS;
	}
	
	//terminal OPMUL:
	//	'*' | '/';
	public TerminalRule getOPMULRule() {
		return tOPMUL;
	}
	
	//terminal OR:
	//	'or';
	public TerminalRule getORRule() {
		return tOR;
	}
	
	//terminal AND:
	//	'and';
	public TerminalRule getANDRule() {
		return tAND;
	}
	
	//terminal OP_R:
	//	'==' | '!=' | '<=' | '>=' | '<' | '>';
	public TerminalRule getOP_RRule() {
		return tOP_R;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
