/**
 * generated by Xtext 2.13.0
 */
package edu.ucf.cs.whilelang.whileLang.impl;

import edu.ucf.cs.whilelang.whileLang.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class WhileLangFactoryImpl extends EFactoryImpl implements WhileLangFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static WhileLangFactory init()
  {
    try
    {
      WhileLangFactory theWhileLangFactory = (WhileLangFactory)EPackage.Registry.INSTANCE.getEFactory(WhileLangPackage.eNS_URI);
      if (theWhileLangFactory != null)
      {
        return theWhileLangFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new WhileLangFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WhileLangFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case WhileLangPackage.PROGRAM: return createProgram();
      case WhileLangPackage.S: return createS();
      case WhileLangPackage.COMPOUND_S: return createCompoundS();
      case WhileLangPackage.ASSIGN_S: return createAssignS();
      case WhileLangPackage.SKIP_S: return createSkipS();
      case WhileLangPackage.WHILE_S: return createWhileS();
      case WhileLangPackage.IF_S: return createIfS();
      case WhileLangPackage.AEXPR: return createAExpr();
      case WhileLangPackage.VAR_REF_EXPR: return createVarRefExpr();
      case WhileLangPackage.NUM_LIT_EXPR: return createNumLitExpr();
      case WhileLangPackage.BEXPR: return createBExpr();
      case WhileLangPackage.NOT_EXPR: return createNotExpr();
      case WhileLangPackage.BCOMP_EXP: return createBCompExp();
      case WhileLangPackage.BPRIMARY: return createBPrimary();
      case WhileLangPackage.AEXPRESSION: return createAExpression();
      case WhileLangPackage.ATERM: return createATerm();
      case WhileLangPackage.BEXPRESSION: return createBExpression();
      case WhileLangPackage.BTERM: return createBTerm();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Program createProgram()
  {
    ProgramImpl program = new ProgramImpl();
    return program;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public S createS()
  {
    SImpl s = new SImpl();
    return s;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CompoundS createCompoundS()
  {
    CompoundSImpl compoundS = new CompoundSImpl();
    return compoundS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AssignS createAssignS()
  {
    AssignSImpl assignS = new AssignSImpl();
    return assignS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SkipS createSkipS()
  {
    SkipSImpl skipS = new SkipSImpl();
    return skipS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WhileS createWhileS()
  {
    WhileSImpl whileS = new WhileSImpl();
    return whileS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IfS createIfS()
  {
    IfSImpl ifS = new IfSImpl();
    return ifS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AExpr createAExpr()
  {
    AExprImpl aExpr = new AExprImpl();
    return aExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VarRefExpr createVarRefExpr()
  {
    VarRefExprImpl varRefExpr = new VarRefExprImpl();
    return varRefExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NumLitExpr createNumLitExpr()
  {
    NumLitExprImpl numLitExpr = new NumLitExprImpl();
    return numLitExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BExpr createBExpr()
  {
    BExprImpl bExpr = new BExprImpl();
    return bExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotExpr createNotExpr()
  {
    NotExprImpl notExpr = new NotExprImpl();
    return notExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BCompExp createBCompExp()
  {
    BCompExpImpl bCompExp = new BCompExpImpl();
    return bCompExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BPrimary createBPrimary()
  {
    BPrimaryImpl bPrimary = new BPrimaryImpl();
    return bPrimary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AExpression createAExpression()
  {
    AExpressionImpl aExpression = new AExpressionImpl();
    return aExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ATerm createATerm()
  {
    ATermImpl aTerm = new ATermImpl();
    return aTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BExpression createBExpression()
  {
    BExpressionImpl bExpression = new BExpressionImpl();
    return bExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BTerm createBTerm()
  {
    BTermImpl bTerm = new BTermImpl();
    return bTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WhileLangPackage getWhileLangPackage()
  {
    return (WhileLangPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static WhileLangPackage getPackage()
  {
    return WhileLangPackage.eINSTANCE;
  }

} //WhileLangFactoryImpl
